export const augmentationSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  $ref: "#/definitions/Augmentations",
  definitions: {
    Augmentations: {
      type: "object",
      properties: {
        leaderboards: {
          type: "array",
          items: {
            $ref: "#/definitions/LeaderboardExpressionSetup",
          },
          description: "Dynamic leaderboards for this game",
        },
        puzzleAggregateStats: {
          type: "array",
          items: {
            $ref: "#/definitions/ExpressionSetup",
          },
          description: "Game specific stats datums to augment the existing aggregate data for a puzzle generated by the API",
        },
        userAggregateStats: {
          type: "array",
          items: {
            type: "object",
            properties: {
              deedID: {
                $ref: "#/definitions/DeedKeys",
                description: "Sometimes, instead of an expression, you may need to hook up to a deed",
              },
              stableID: {
                type: ["string", "null"],
                description:
                  'For a lot of augmentations, this acts as an "id" and should be unique and treated as a lower, kebab-case string.\n\nFor a leaderboard:\n-  A stable ID has to be in the format of `game-[gameslug]:[your value name]` for a game-based leaderboard    (value here likely can be your deedID). The formatting will get validated on puzzle creation, and in TypeScript.',
              },
              filterExp: {
                type: "string",
                description:
                  "An expression string which can stop something from happening. A concrete example: Whether to post to a leaderboard or not. If the expression returns true or > 0 then the entry is considered allowed for the leaderboard.",
              },
              valueExp: {
                type: "string",
                description:
                  'An expression string which can be used to generate the value for whatever your config is based on. The API will provide a set of appropriate variables for you to use in this JS-like expression string. They are based on "AngularJS Expressions" which you can read about here: https://docs.angularjs.org/guide/expression',
              },
            },
            additionalProperties: false,
          },
          description:
            "Game specific user aggregate stats, these get tied to the game/variant and are separate from the existing stats which are generated in code via the API",
        },
        persistedDeeds: {
          type: "array",
          items: {
            $ref: "#/definitions/ExpressionSetup",
          },
          description:
            "A way to add additional persisted deeds based on the data from the game. Consider it a way to take a non-persisted deed, and persist it. For example, if you wanted to take a temporary deed from a game and show it on a completion table. The \"deedID\" is used as storage key, value lookup is done via 'valueExp'.",
        },
        completionTable: {
          type: "array",
          items: {
            type: "object",
            properties: {
              title: {
                type: "string",
              },
              persistedDeedID: {
                type: "string",
              },
              formatString: {
                type: "string",
              },
            },
            required: ["title", "persistedDeedID", "formatString"],
            additionalProperties: false,
          },
          description: "Additional info to show on the today page completion table, it is ignored when coming from a game",
        },
        completionSidebar: {
          type: "array",
          items: {
            $ref: "#/definitions/ExpressionSetup",
          },
          description:
            "Additional info to show on the today page completion table, it is ignored when coming from a game. Used for deeds which do not have a leaderboard attached",
        },
        forceGameSettings: {
          type: "object",
          description:
            "Default settings for a game, for example if we had a setting where we provide AI assists to RBC, we could make a variant where that setting was on by default",
        },
      },
      additionalProperties: false,
      description:
        'Site-wide hooks which are sent at puzzle creation (via front-matter), and via game completion messages.\n\nGames/Variants/FrontMatter: Supports All Fields. Game Completion: Just "leaderboards"',
    },
    LeaderboardExpressionSetup: {
      type: "object",
      additionalProperties: false,
      properties: {
        stableID: {
          type: ["string", "null"],
          description:
            'For a lot of augmentations, this acts as an "id" and should be unique and treated as a lower, kebab-case string.\n\nFor a leaderboard:\n-  A stable ID has to be in the format of `game-[gameslug]:[your value name]` for a game-based leaderboard    (value here likely can be your deedID). The formatting will get validated on puzzle creation, and in TypeScript.',
        },
        scoreTechnique: {
          type: ["string", "null"],
          enum: ["AggregateOfBest", "AggregateOfAll", null],
          description:
            'Provides a way to control how we handle different scoring algorithms, right now you have the default (overwrite on best) and "AggregateOfBest" which aggregates based on the',
        },
        rotation: {
          type: "string",
          enum: ["Weekly", "Monthly"],
          description: "How often does this leaderboard rotate? Leaving empty is means daily",
        },
        icons: {
          type: "array",
          items: {
            type: "string",
          },
          description: "What icons should show above the leaderboard? These want to be game slugs",
        },
        rules: {
          type: "string",
          description: "A \\n separated list of rules to put under a leaderboard",
        },
        subscoreExp: {
          type: "string",
          description: "An expression to grab a subscore",
        },
        championsLeague: {
          type: "boolean",
          const: true,
          description:
            "Support having a champion's league, where we extract the top players from the game and move them into a new league. Only available for use on the Game augmentations (and not at puzzles/variants/runtime etc) and on leaderboards with a rotation of null (daily.)",
        },
        displayName: {
          type: "string",
          description: "What do we call this datum",
        },
        secondaryName: {
          type: "string",
          description: "An optional secondary name for this config. For example, on a leaderboard this is used in the completion sidebar",
        },
        order: {
          type: "string",
          enum: ["Higher=better", "Lower=better"],
          description: "Just saying it how it is, for some augmentations, this isn't necessary",
        },
        deedID: {
          $ref: "#/definitions/DeedKeys",
          description: "Sometimes, instead of an expression, you may need to hook up to a deed",
        },
        formatString: {
          type: "string",
          description:
            'A custom string formatter, slightly based on printf.\n- `%+`: Adds a plus sign _only_ to positive numbers\n- `%@`: Takes the value and replaces the token with the value. If a number it is \'toLocaleString("en-US")\'ed\n- `%TD`: Takes the text definition for a deed and replaces the token with the value\n- `"[time]"`: Converts a number of seconds to a colon-separated time string (must be exact match)',
        },
        filterExp: {
          type: "string",
          description:
            "An expression string which can stop something from happening. A concrete example: Whether to post to a leaderboard or not. If the expression returns true or > 0 then the entry is considered allowed for the leaderboard.",
        },
        valueExp: {
          type: "string",
          description:
            'An expression string which can be used to generate the value for whatever your config is based on. The API will provide a set of appropriate variables for you to use in this JS-like expression string. They are based on "AngularJS Expressions" which you can read about here: https://docs.angularjs.org/guide/expression',
        },
        sortValue: {
          type: "number",
          description:
            "Different augmentations would do different things with this sort value. Leaderboards for example use this when displaying on a page.",
        },
      },
      required: ["displayName", "formatString", "stableID"],
    },
    DeedKeys: {
      type: "string",
      enum: [
        "points",
        "time",
        "hints",
        "words-found",
        "moves",
        "excess-moves",
        "custom-time",
        "completion-type",
        "par",
        "best-word",
        "longest-word",
        "time-to-best-word",
        "avg-word-length",
        "wpm",
        "long-word-counts",
        "captures",
        "losses",
        "hands",
        "quality-hands",
        "best-hands",
        "mode",
        "plonks",
        "perfect",
        "chains",
      ],
    },
    ExpressionSetup: {
      type: "object",
      properties: {
        displayName: {
          type: "string",
          description: "What do we call this datum",
        },
        secondaryName: {
          type: "string",
          description: "An optional secondary name for this config. For example, on a leaderboard this is used in the completion sidebar",
        },
        stableID: {
          type: ["string", "null"],
          description:
            'For a lot of augmentations, this acts as an "id" and should be unique and treated as a lower, kebab-case string.\n\nFor a leaderboard:\n-  A stable ID has to be in the format of `game-[gameslug]:[your value name]` for a game-based leaderboard    (value here likely can be your deedID). The formatting will get validated on puzzle creation, and in TypeScript.',
        },
        order: {
          type: "string",
          enum: ["Higher=better", "Lower=better"],
          description: "Just saying it how it is, for some augmentations, this isn't necessary",
        },
        deedID: {
          $ref: "#/definitions/DeedKeys",
          description: "Sometimes, instead of an expression, you may need to hook up to a deed",
        },
        formatString: {
          type: "string",
          description:
            'A custom string formatter, slightly based on printf.\n- `%+`: Adds a plus sign _only_ to positive numbers\n- `%@`: Takes the value and replaces the token with the value. If a number it is \'toLocaleString("en-US")\'ed\n- `%TD`: Takes the text definition for a deed and replaces the token with the value\n- `"[time]"`: Converts a number of seconds to a colon-separated time string (must be exact match)',
        },
        filterExp: {
          type: "string",
          description:
            "An expression string which can stop something from happening. A concrete example: Whether to post to a leaderboard or not. If the expression returns true or > 0 then the entry is considered allowed for the leaderboard.",
        },
        valueExp: {
          type: "string",
          description:
            'An expression string which can be used to generate the value for whatever your config is based on. The API will provide a set of appropriate variables for you to use in this JS-like expression string. They are based on "AngularJS Expressions" which you can read about here: https://docs.angularjs.org/guide/expression',
        },
        sortValue: {
          type: "number",
          description:
            "Different augmentations would do different things with this sort value. Leaderboards for example use this when displaying on a page.",
        },
      },
      required: ["displayName", "formatString"],
      additionalProperties: false,
      description:
        "Data given by either via a puzzle in front-matter, or a game in completion. A general unit of data which can be used to represent a lot of configuration points from the game to the API.",
    },
  },
}

// export type Scope {
//  /** Your user account */
//   user: User
// }
//
// /** My Type */
// type User {
//   /** User's ID */
//   id: string
//   /** Their name */
//   name: string
//   /** Their firstname + last name */
//   displayName: string
// }

export const userSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  $ref: "#/definitions/Scope",
  definitions: {
    Scope: {
      type: "object",
      properties: {
        user: {
          type: "object",
          properties: {
            id: {
              type: "string",
              description: "User's ID",
            },
            name: {
              type: "string",
              description: "Their name",
            },
            displayName: {
              type: "string",
              description: "Their firstname + last name",
            },
          },
          required: ["id", "name", "displayName"],
          additionalProperties: false,
          description: "Your user account",
        },
      },
      required: ["user"],
      additionalProperties: false,
    },
  },
}
